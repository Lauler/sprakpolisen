import re


def add_quotation(sentence):
    return "> " + sentence


def add_paragraph(text):
    return text + " \n\n"


def add_emoji(type):
    """
    Add Unicode emojis.
    """

    if type == "police":
        # https://unicode-table.com/en/1F46E/ 游놅
        html_code = "&#128110;"
    elif type == "car":
        # https://unicode-table.com/en/1F693/ 游뚭
        html_code = "&#128659;"
    elif type == "siren":
        # https://unicode-table.com/en/1F6A8/ 游뚿
        html_code = "&#128680;"

    return html_code


def add_horizontal_rule(text):
    return text + "---"


def insert_heading(header):
    return f"## {header}"


def remove_emoji(text):
    # https://stackoverflow.com/questions/33404752/removing-emojis-from-a-string-in-python

    emoji_pattern = re.compile("[^\U00000000-\U0000d7ff\U0000e000-\U0000ffff]", flags=re.UNICODE)

    return emoji_pattern.sub("", text)


def reverse_replace(text, old, new, n):
    """
    Replace n occurences of 'old' with 'new' starting from the right side of the text.
    """
    split_sen = text.rsplit(old, n)
    return new.join(split_sen)


def wrongful_de_dem(df_post):
    de_nr = df_post["nr_mistakes_de"].iloc[0]
    dem_nr = df_post["nr_mistakes_dem"].iloc[0]

    if de_nr == 0 and dem_nr > 0:
        wrongful_msg = f"**{dem_nr}** felaktiga anv칛ndningar av `dem`"
    elif de_nr > 0 and dem_nr == 0:
        wrongful_msg = f"**{de_nr}** felaktiga anv칛ndningar av `de`"
    elif de_nr > 0 and dem_nr > 0:
        wrongful_msg = (
            f"**{de_nr}** felaktiga anv칛ndningar av `de` "
            f"samt **{dem_nr}** felaktiga anv칛ndningar av `dem`"
        )

    if (
        (de_nr == 1 and dem_nr == 0)
        or (de_nr == 0 and dem_nr == 1)
        or (de_nr == 1 and dem_nr == 1)
    ):
        wrongful_msg = wrongful_msg.replace("felaktiga", "felaktig")
        wrongful_msg = wrongful_msg.replace("anv칛ndningar", "anv칛ndning")

    if de_nr == 1 and dem_nr > 1:
        wrongful_msg = wrongful_msg.replace("felaktiga", "felaktig", 1)
        wrongful_msg = wrongful_msg.replace("anv칛ndningar", "anv칛ndning", 1)

    if de_nr > 1 and dem_nr == 1:
        wrongful_msg = reverse_replace(wrongful_msg, "felaktiga", "felaktig", 1)
        wrongful_msg = reverse_replace(wrongful_msg, "anv칛ndningar", "anv칛ndning", 1)

    message = f"Efter en analys har mitt neurala n칛tverk uppt칛ckt {wrongful_msg}."

    return message


def create_analysis_legend():
    message = (
        # f"~~ord~~: 칐verstruket ord indikerar felaktig anv칛ndning av ~~de~~ eller ~~dem~~.  \n"
        # f"Fetstilt **de/dem** 칛r Spr친kpolisenBots f칬rslag till korrigering."
        # f"**(##.##%)**: Siffror inom parentes indikerar hur pass s칛ker modellen 칛r p친 sin prediktion."
    )

    return message


def create_header(df_post):

    if df_post["nr_mistakes"][0] <= 2:
        message = (
            f'Tjenixen, Spr친kpolisenBot h칛r {add_emoji("police")}. Jag 칛r en bot som '
            f"skiljer p친 `de` och `dem`. "
        )
    if df_post["nr_mistakes"][0] >= 3:
        message = (
            f'Stopp {add_emoji("car")}{add_emoji("siren")}! '
            f'Du har blivit gripen av Spr친kpolisenBot {add_emoji("police")} '
            f"p친 sannolika sk칛l misst칛nkt f칬r brott mot det svenska skriftspr친ket. "
        )

    # if df_post["nr_mistakes"][0] == 2:
    #     message = (
    #         f'Spr친kpolisenBot h칛r {add_emoji("police")}{add_emoji("car")}. '
    #         f"Vi utf칬r f칬r n칛rvarande slumpm칛ssiga spr친kkontroller av kommentarer p친 Sweddit. "
    #         f"Ovanst친ende inl칛gg 칬verskred den till친tna gr칛nsen f칬r felaktiga `de/dem`-anv칛ndningar. "
    #         f"Vi rekommenderar anv칛ndare som vill undvika att fastna i framtida kontroller att "
    #         f"ta del av analysen och guiden som bifogas nedan."
    #     )

    return message


def create_guide(df_post):
    guide_message = (
        f"En guide med tips f칬r att skilja p친 `de` och `dem` finnes "
        f"p친 [Spr친kpolisens hemsida](https://lauler.github.io/sprakpolisen/guide.html). "
        # f"En interaktiv demo d칛r anv칛ndare sj칛lva kan skriva in meningar och f친 dem "
        # f"r칛ttade [finns h칛r](https://lauler.github.io/sprakpolisen/demo.html)."
    )

    message = ""

    if df_post["nr_mistakes_dem"][0] >= 2:
        added_message = (
            f"Visste du att `de` 칛r cirka 10 g친nger vanligare 칛n `dem` i svensk text? "
            f"Om du 칛r os칛ker kring vilket som 칛r r칛tt 칛r det allts친 statistiskt sett s칛krast "
            f"att ***alltid gissa p친 `de`.***"
        )
        message += add_paragraph(added_message)

    if df_post["sentences"].apply(
        lambda sens: any([bool(re.search("[Dd]em flesta", sen)) for sen in sens])
    )[0]:
        added_message = (
            f"Visste du att det aldrig kan heta ~~dem flesta~~ p친 svenska? **De flesta** "
            f"칛r den enda korrekta formen av uttrycket."
        )
        message += add_paragraph(added_message)

    for word in ["andra", "v칛rsta", "b칛sta", "s칛msta", "f칬rsta"]:
        if df_post["sentences"].apply(
            lambda sens: any([bool(re.search(f"[Dd]em {word}", sen)) for sen in sens])
        )[0]:
            added_message = (
                f"Visste du att det inte kan heta ~~dem {word}~~? **De {word}** "
                f"칛r den korrekta formen. N칛r `de` anv칛nds i en betydelse "
                f"som motsvarar engelskans **the**, ska det alltid vara `de` p친 svenska."
            )
            message += add_paragraph(added_message)

    message += guide_message

    return message


def create_guide_en(df_post):
    """
    Guide if English sentences are successfully translated and included in message.
    """

    guide_message = (
        f"[Tips](https://lauler.github.io/sprakpolisen/guide.html): Anv칛nd engelskan till hj칛lp. "
        f"Om **them** passar b칛st ska det vara `dem` p친 svenska. "
        f"Om **they/those/the** eller n친got annat passar b칛ttre ska det vara `de`."
    )

    message = ""

    if df_post["sentences"].apply(
        lambda sens: any([bool(re.search("[Dd]em flesta", sen)) for sen in sens])
    )[0]:
        added_message = (
            f"Visste du att det aldrig kan heta ~~dem flesta~~ p친 svenska? **De flesta** "
            f"칛r den enda korrekta formen av uttrycket."
        )
        message += add_paragraph(added_message)

    for word in ["andra", "v칛rsta", "b칛sta", "s칛msta", "f칬rsta"]:
        if df_post["sentences"].apply(
            lambda sens: any([bool(re.search(f"[Dd]em {word}", sen)) for sen in sens])
        )[0]:
            added_message = (
                f"Visste du att det inte kan heta ~~dem {word}~~? **De {word}** "
                f"칛r den korrekta formen. N칛r `de` anv칛nds i en betydelse "
                f"som motsvarar engelskans **the**, ska det alltid vara `de` p친 svenska."
            )
            message += add_paragraph(added_message)

    message += guide_message

    return message


def create_footer():
    # &nbsp; is space character, needed for compatibility with old reddit.
    message = (
        f"^[Om&nbsp;Spr친kpolisenBot](https://lauler.github.io/sprakpolisen) | "
        f"^[K칛llkod](https://github.com/Lauler/sprakpolisen) | "
        f"^[Vanliga&nbsp;fr친gor](https://lauler.github.io/sprakpolisen/faq.html) | "
        f"^[Feedback](https://lauler.github.io/sprakpolisen/contact.html) | "
        f"^[Interaktiv&nbsp;demo](https://lauler.github.io/sprakpolisen/demo.html) "
    )

    return message
